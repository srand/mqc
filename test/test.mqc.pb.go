// Code generated by protoc-gen-mqc. DO NOT EDIT.
// versions:
// protoc-gen-go-mqc v1.0.0

package test

import (
	"context"
	"fmt"

	"github.com/srand/mqc"
)

type RpcTestClient interface {
	Rpc(ctx context.Context, req *TestRequest) (*TestReply, error)
}

type RpcTestServer interface {
	Rpc(req *TestRequest) (*TestReply, error)
}

type ServerStreamTestClient interface {
	Stream(ctx context.Context, req *TestRequest) (mqc.ServerStreamClient[TestReply], error)
}

type ServerStreamTestServer interface {
	Stream(req *TestRequest, stream mqc.ServerStreamServer[TestReply]) error
}

type ClientStreamTestClient interface {
	Stream(ctx context.Context) (mqc.ClientStreamClient[TestRequest, TestReply], error)
}

type ClientStreamTestServer interface {
	Stream(stream mqc.ClientStreamServer[TestRequest, TestReply]) error
}

type BidiStreamTestClient interface {
	Stream(ctx context.Context) (mqc.BidiStreamClient[TestRequest, TestReply], error)
}

type BidiStreamTestServer interface {
	Stream(stream mqc.BidiStreamServer[TestRequest, TestReply]) error
}

type rpcTestClient struct {
	transport mqc.Transport
}

func NewRpcTestClient(transport mqc.Transport) *rpcTestClient {
	return &rpcTestClient{transport: transport}
}

func (c *rpcTestClient) Rpc(ctx context.Context, req *TestRequest) (*TestReply, error) {
	return mqc.Rpc[TestRequest, TestReply](ctx, c.transport, mqc.NewMethod("RpcTest/Rpc", mqc.MethodTypeUnary), req)
}

type serverStreamTestClient struct {
	transport mqc.Transport
}

func NewServerStreamTestClient(transport mqc.Transport) *serverStreamTestClient {
	return &serverStreamTestClient{transport: transport}
}

func (c *serverStreamTestClient) Stream(ctx context.Context, req *TestRequest) (mqc.ServerStreamClient[TestReply], error) {
	return mqc.NewServerStreamClient[TestRequest, TestReply](ctx, c.transport, mqc.NewMethod("ServerStreamTest/Stream", mqc.MethodTypeServerStream), req)
}

type clientStreamTestClient struct {
	transport mqc.Transport
}

func NewClientStreamTestClient(transport mqc.Transport) *clientStreamTestClient {
	return &clientStreamTestClient{transport: transport}
}

func (c *clientStreamTestClient) Stream(ctx context.Context) (mqc.ClientStreamClient[TestRequest, TestReply], error) {
	return mqc.NewClientStreamClient[TestRequest, TestReply](ctx, c.transport, mqc.NewMethod("ClientStreamTest/Stream", mqc.MethodTypeClientStream))
}

type bidiStreamTestClient struct {
	transport mqc.Transport
}

func NewBidiStreamTestClient(transport mqc.Transport) *bidiStreamTestClient {
	return &bidiStreamTestClient{transport: transport}
}

func (c *bidiStreamTestClient) Stream(ctx context.Context) (mqc.BidiStreamClient[TestRequest, TestReply], error) {
	return mqc.NewBidiStreamClient[TestRequest, TestReply](ctx, c.transport, mqc.NewMethod("BidiStreamTest/Stream", mqc.MethodTypeBidiStream))
}

type UnimplementedRpcTestServer struct{}

func (s *UnimplementedRpcTestServer) Rpc(req *TestRequest) (*TestReply, error) {
	return nil, fmt.Errorf("method Rpc not implemented")
}

func RegisterRpcTestServer(transport mqc.Transport, server RpcTestServer) {
	transport.RegisterHandler(mqc.NewMethod("RpcTest/Rpc", mqc.MethodTypeUnary), func(conn mqc.Conn) error {
		return mqc.RpcServer(conn, transport.Serializer(), func(req *TestRequest) (*TestReply, error) {
			return server.Rpc(req)
		})
	})
}

type UnimplementedServerStreamTestServer struct{}

func (s *UnimplementedServerStreamTestServer) Stream(req *TestRequest, stream mqc.ServerStreamServer[TestReply]) error {
	return fmt.Errorf("method Stream not implemented")
}

func RegisterServerStreamTestServer(transport mqc.Transport, server ServerStreamTestServer) {
	transport.RegisterHandler(mqc.NewMethod("ServerStreamTest/Stream", mqc.MethodTypeServerStream), func(conn mqc.Conn) error {
		stream, req, err := mqc.NewServerStreamServer[TestRequest, TestReply](transport, conn)
		if err != nil {
			return err
		}
		return server.Stream(req, stream)
	})
}

type UnimplementedClientStreamTestServer struct{}

func (s *UnimplementedClientStreamTestServer) Stream(stream mqc.ClientStreamServer[TestRequest, TestReply]) error {
	return fmt.Errorf("method Stream not implemented")
}

func RegisterClientStreamTestServer(transport mqc.Transport, server ClientStreamTestServer) {
	transport.RegisterHandler(mqc.NewMethod("ClientStreamTest/Stream", mqc.MethodTypeClientStream), func(conn mqc.Conn) error {
		stream, err := mqc.NewClientStreamServer[TestRequest, TestReply](transport, conn)
		if err != nil {
			return err
		}
		return server.Stream(stream)
	})
}

type UnimplementedBidiStreamTestServer struct{}

func (s *UnimplementedBidiStreamTestServer) Stream(stream mqc.BidiStreamServer[TestRequest, TestReply]) error {
	return fmt.Errorf("method Stream not implemented")
}

func RegisterBidiStreamTestServer(transport mqc.Transport, server BidiStreamTestServer) {
	transport.RegisterHandler(mqc.NewMethod("BidiStreamTest/Stream", mqc.MethodTypeBidiStream), func(conn mqc.Conn) error {
		stream, err := mqc.NewBidiStreamServer[TestRequest, TestReply](transport, conn)
		if err != nil {
			return err
		}
		return server.Stream(stream)
	})
}

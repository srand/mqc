// Code generated by protoc-gen-mqc. DO NOT EDIT.
// versions:
// protoc-gen-go-mqc v1.0.0

package pubsub

import (
	"context"
	"fmt"

	"github.com/srand/mqc"
)

type WeatherClient interface {
	Update(ctx context.Context) (mqc.BidiStreamClient[WeatherUpdate, WeatherUpdate], error)
}

type WeatherServer interface {
	Update(stream mqc.BidiStreamServer[WeatherUpdate, WeatherUpdate]) error
}

type WeatherConsumer interface {
	Update(ctx context.Context) (mqc.BidiStreamClient[WeatherUpdate, WeatherUpdate], error)
}

type WeatherPublisher interface {
	Update(ctx context.Context) (mqc.BidiStreamServer[WeatherUpdate, WeatherUpdate], error)
}

type weatherClient struct {
	transport mqc.Transport
}

func NewWeatherClient(transport mqc.Transport) *weatherClient {
	return &weatherClient{transport: transport}
}

func (c *weatherClient) Update(ctx context.Context) (mqc.BidiStreamClient[WeatherUpdate, WeatherUpdate], error) {
	return mqc.NewBidiStreamClient[WeatherUpdate, WeatherUpdate](ctx, c.transport, mqc.NewMethod("Weather/Update", mqc.MethodTypeBidiStream))
}

type weatherConsumer struct {
	transport mqc.Transport
}

func NewWeatherConsumer(transport mqc.Transport) *weatherConsumer {
	return &weatherConsumer{transport: transport}
}

func (c *weatherConsumer) Update(ctx context.Context) (mqc.ServerStreamClient[WeatherUpdate], error) {
	return mqc.NewPubSubClient[WeatherUpdate](ctx, c.transport, mqc.NewMethod("Weather/Update", mqc.MethodTypeConsumer))
}

type weatherPublisher struct {
	transport mqc.Transport
}

func NewWeatherPublisher(transport mqc.Transport) *weatherPublisher {
	return &weatherPublisher{transport: transport}
}

func (c *weatherPublisher) Update(ctx context.Context) (mqc.ServerStreamServer[WeatherUpdate], error) {
	return mqc.NewPubSubClient[WeatherUpdate](ctx, c.transport, mqc.NewMethod("Weather/Update", mqc.MethodTypePublisher))
}

type UnimplementedWeatherServer struct{}

func (s *UnimplementedWeatherServer) Update(stream mqc.BidiStreamServer[WeatherUpdate, WeatherUpdate]) error {
	return fmt.Errorf("method Update not implemented")
}

func RegisterWeatherServer(transport mqc.Transport, server WeatherServer) {
	transport.RegisterHandler(mqc.NewMethod("Weather/Update", mqc.MethodTypeBidiStream), func(conn mqc.Conn) error {
		stream, err := mqc.NewBidiStreamServer[WeatherUpdate, WeatherUpdate](transport, conn)
		if err != nil {
			return err
		}
		return server.Update(stream)
	})
}

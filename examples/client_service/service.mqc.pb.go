// Code generated by protoc-gen-mqc. DO NOT EDIT.
// versions:
// protoc-gen-go-mqc v1.0.0

package client_service

import (
	"context"
	"fmt"
	"github.com/srand/mqc"
)

type EchoClient interface {
	Echo(ctx context.Context, req *EchoRequest) (*EchoReply, error)
}

type EchoServer interface {
	Echo(req *EchoRequest) (*EchoReply, error)
}

type echoClient struct {
	transport mqc.Transport
}

func NewEchoClient(transport mqc.Transport) *echoClient {
	return &echoClient{transport: transport}
}

func (c *echoClient) Echo(ctx context.Context, req *EchoRequest) (*EchoReply, error) {
	return mqc.Rpc[EchoRequest, EchoReply](ctx, c.transport, mqc.Method("Echo/Echo"), req)
}

type UnimplementedEchoServer struct{}

func (s *UnimplementedEchoServer) Echo(req *EchoRequest) (*EchoReply, error) {
	return nil, fmt.Errorf("method Echo not implemented")
}

func RegisterEchoServer(transport mqc.Transport, server EchoServer) {
	transport.RegisterHandler("Echo/Echo", func(conn mqc.Conn) error {
		return mqc.RpcServer(conn, transport.Serializer(), func(req *EchoRequest) (*EchoReply, error) {
			return server.Echo(req)
		})
	})
}
